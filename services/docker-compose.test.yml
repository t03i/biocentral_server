services:
  # Redis for caching (required)
  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Triton Inference Server (required for embeddings)
  triton:
    build:
      context: ./triton-custom
    ports:
      - "8000:8000"  # HTTP
      - "8001:8001"  # gRPC 
      - "8002:8002"  # Metrics
    volumes:
      - ./model-repository:/models:ro
    environment:
      - CUDA_VISIBLE_DEVICES=""  # Force CPU-only for testing
      - NVIDIA_VISIBLE_DEVICES=""  # Ensure no NVIDIA devices are visible
    command: >
      tritonserver 
      --model-repository=/models 
      --strict-model-config=false
      --log-verbose=1
      --allow-grpc=true
      --allow-http=true
      --allow-metrics=true
      --backend-config=python,shm-default-byte-size=16777216
      --model-control-mode=poll
      --repository-poll-secs=10
      --exit-on-error=false
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s  # Models take time to load

  # Embedding service under test
  embedding-service:
    build: 
      context: ./embeddings-service
    ports:
      - "8003:8001"  # Expose for testing
    environment:
      - REDIS_URL=redis://redis:6379
      - TRITON_URL=triton:8001
    depends_on:
      redis:
        condition: service_healthy
      triton:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8001/embeddings/health', timeout=5).raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s 